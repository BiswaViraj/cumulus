locals {
  package_md5 = filemd5(var.filename)
  package_key = "${var.prefix}/lambdas/${var.function_name}-${local.package_md5}.zip"
}

resource "null_resource" "upload_lambda_package" {
  triggers = { x = uuid() }
  provisioner "local-exec" {
    command = "aws s3 cp '${var.filename}' 's3://${var.system_bucket}/${local.package_key}'"
  }
}

resource "aws_lambda_function" "task" {
  depends_on = [null_resource.upload_lambda_package]

  function_name    = "${var.prefix}-${var.function_name}"
  s3_bucket        = var.system_bucket
  s3_key           = local.package_key
  source_code_hash = filebase64sha256(var.filename)
  handler          = var.handler
  role             = var.role
  runtime          = var.runtime
  timeout          = var.timeout
  memory_size      = var.memory_size

  layers = var.layers

  publish = var.enable_versioning

  dynamic "environment" {
    for_each = length(var.environment_variables) == 0 ? [] : [1]
    content {
      variables = var.environment_variables
    }
  }

  vpc_config {
    subnet_ids         = var.subnet_ids
    security_group_ids = var.security_group_ids
  }

  tags = var.tags
}

resource "null_resource" "create_alias" {
  count = var.enable_versioning ? 1 : 0

  triggers = { lambda_version = aws_lambda_function.task.version }

  provisioner "local-exec" {
    command = "aws lambda create-alias --function-name \"${aws_lambda_function.task.function_name}\" --function-version \"${aws_lambda_function.task.version}\" --name \"${aws_lambda_function.task.function_name}-${local.package_md5}\" --description \"Cumulus AutoGenerated Alias | ${var.task_version}\""
  }
}
